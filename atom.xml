<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Neuronal Simulation on Bluehive Hardware]]></title>
  <link href="http://mikehulluk.github.io/mhblue/atom.xml" rel="self"/>
  <link href="http://mikehulluk.github.io/mhblue/"/>
  <updated>2013-06-17T10:33:08+01:00</updated>
  <id>http://mikehulluk.github.io/mhblue/</id>
  <author>
    <name><![CDATA[Mike Hull]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Preliminary simulation results]]></title>
    <link href="http://mikehulluk.github.io/mhblue/blog/2013/06/14/simulation-reults/"/>
    <updated>2013-06-14T16:40:00+01:00</updated>
    <id>http://mikehulluk.github.io/mhblue/blog/2013/06/14/simulation-reults</id>
    <content type="html"><![CDATA[<p>It was possible to get the tadpole simulation to run on the NIOS processor.
This is a reduced tadpole model of just 30 dINs (electrically coupled, feedback NMDA)
connected by excitatory AMPA synapses to a population of 5 passive neurons.</p>

<p>The code runs very slowly on the NIOS at the moment. For 10000 time-steps (1s) &ndash; using GCC -02, the code runs
almost instanteously on the desktop machine.</p>

<p>On the NIOS, if I comment out the &lsquo;core loop&rsquo; for solving the update equations
(i.e. leaving the electrical coupling, and synaptic message passing features
on, then the code runs in ~15s</p>

<p>If I turn on the core loop, it takes ~10mins to run.</p>

<p>Below is some simulation traces from runnning on the NIOS.</p>

<p><img src="week2/FriCPP_NIOS_ex1.png" alt="Alt text" /></p>

<p><img src="week2/FriCPP_NIOS_ex2.png" alt="Alt text" /></p>

<p>There are several possibilities for why this is running slowly &ndash; particularly surrounding how the
NIOS and the memory are configured on the FPGA</p>

<p>Some optimisation possibilities ahead!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ running the tadpole on the FPGA]]></title>
    <link href="http://mikehulluk.github.io/mhblue/blog/2013/06/10/c-plus-plus-implementation-of-tadpole-swimming-model-on-nios/"/>
    <updated>2013-06-10T09:52:00+01:00</updated>
    <id>http://mikehulluk.github.io/mhblue/blog/2013/06/10/c-plus-plus-implementation-of-tadpole-swimming-model-on-nios</id>
    <content type="html"><![CDATA[<p>It was relatively painless to port a the version of C++ code running
on my desktop to run a first version.</p>

<p>NIOS ON FPGA.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Implementation of tadpole swimming model]]></title>
    <link href="http://mikehulluk.github.io/mhblue/blog/2013/06/10/c-plus-plus-implementation-of-tadpole-swimming-model/"/>
    <updated>2013-06-10T08:52:00+01:00</updated>
    <id>http://mikehulluk.github.io/mhblue/blog/2013/06/10/c-plus-plus-implementation-of-tadpole-swimming-model</id>
    <content type="html"><![CDATA[<p>Having looked at the C-code for the tadpole swimming model written
by our colleagues in Plymouth, I decided that it would be simpler to
reimplement the model from scratch, rather than use the existing
code base.</p>

<p>I began with a slightly simplified version of the model for initial
testing. During tadpole swimming, a population of interneurons on
each side of the nervous systems with descending axons, (dINs), are
the first neurosn to fire on each cycle. These neurons are central
to swimming and also have some interesting features: a) they are
electrically coupled via thier axons; and b) they make mutual feedback
NMDA-receptor synapses back onto themselves.</p>

<p>It is proposed that the feedback NMDA synapses allow the network to
produce sustained activity following a brief stimulus. It is also
proposed that the electrical coupling between the neurons causes
thier activity to become synchronised.</p>

<p>The C++ model runs on my desktop computer. The dIN population is 30
neurons, but in the following graphs, the traces of 10 neurons are
shown. In all cases, all neurons are given a step current injection of 50pA
for t=0.05 to t=0.2 (times in milliseconds). All the neurons are given identical
parameters, but there is variation in the network connectivity.</p>

<p>In the first experiment, there is no NMDA and no electrical
coupling. Activity is not sustained after the initial current injection.</p>

<p><img src="week1/Voltage.png" alt="Alt text 1" /></p>

<p>In the second experiment, there are feedback NMDA synapses, but no
electrical coupling. Activity is sustained after the initial current
injection, but it is not synchronised and the variation in the
network connections mean it quickly becomes desynchronised.</p>

<p><img src="week1/Voltage_NMDA.png" alt="Alt text 2" /></p>

<p>In the third experiment, there are feedback NMDA synapses and
electrical coupling between the neurons. Activity is sustained after the initial current
injection, but it is synchronised.</p>

<p><img src="week1/Voltage_NMDA_EC.png" alt="Alt text 3" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initial plans]]></title>
    <link href="http://mikehulluk.github.io/mhblue/blog/2013/06/03/project-plans/"/>
    <updated>2013-06-03T14:23:00+01:00</updated>
    <id>http://mikehulluk.github.io/mhblue/blog/2013/06/03/project-plans</id>
    <content type="html"><![CDATA[<p>One of the main aims of this project is to explore the issues
surrounding how simulations of nervous systems, composed of
interconnected neurons, can be solved efficiently on electronic
hardware.</p>

<p>To begin this project, I will start by:</p>

<ol>
<li>Spending a few hours sitting down with the collaborators in the group
working on the FPGAs, in order to understand the toolchain and how code is
uploaded and run on the chips.</li>
<li>Come up with a simple C-model that can be used as basis for hand-mapping
onto the FPGA&rsquo;s. My plan is a small simulation of small numbers of different
types of (HH-type) neurons, synapses and gap junctions. The idea here is
understand the basic principles of how these can be mapped onto the FPGA. I
will start by looking at the C-tadpole model written by colleagues at the
University of Plymouth group. If this is more complex than what we need, I
think its only a couple of days work to reduce it to its bare-bones and
write it from scratch C. This will give us a simple test-case to work
against.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tadpole model]]></title>
    <link href="http://mikehulluk.github.io/mhblue/blog/2013/06/03/tadpole-overview/"/>
    <updated>2013-06-03T14:05:00+01:00</updated>
    <id>http://mikehulluk.github.io/mhblue/blog/2013/06/03/tadpole-overview</id>
    <content type="html"><![CDATA[<p>Experimental investigation of simple nervous system preparations has
a long history of uncovering fundamental issues about neuroscience:
the generation of the action potential in squid giant axons,
electrical coupling in escape responses, etc. In some Â systems, the
neurons and their synaptic connections have been sufficiently well
described that when computational models of these components are
integrated, they produce similar behaviours to those seen in the
real animal.</p>

<p>One animal in which remarkable progress how a nervous system responds to
stimuli to generate is the hatchling Xenopus tadpole.</p>

<p>MORE XX</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Overview]]></title>
    <link href="http://mikehulluk.github.io/mhblue/blog/2013/06/03/introduction/"/>
    <updated>2013-06-03T14:00:00+01:00</updated>
    <id>http://mikehulluk.github.io/mhblue/blog/2013/06/03/introduction</id>
    <content type="html"><![CDATA[<p>From snails to scorpions to sea-lions, the nervous systems of
animals play a central role in generating behaviours. Nervous
systems are though to be composed of billions of specialised nerve
cells, or <em>neurons</em>.  These neurons have remarkable electrical
properties and can actively respond to certain types of
stimulation.  Neurons can connect together either via direct
electrical connections, or via more complex chemical synapses.  In
more complex animals, like mammals, one hypothesis is that
information is encoded in electrical signals in the brain and that
the different types of neurons and the specific connections between
them allows incoming sensory information to be filtered and processed.</p>

<p>In simpler animals, such as leechs &amp; crabs, it has been possible to
isolate parts of the nervous systems that generate specific
behaviours such as the heartbeat and chewing in the stomach. In
many cases, the electrical signals that drive these rhythmic
behaviours are generated intrinsically, without the need for
sensory feedback, by a population of neurons known as a
pattern-generator-circuit. This is important because it means we
can try to understand how the neuronal network works, without
worrying about feedback from the animal moving.</p>

<p>Since we can model the individual components, and the interactions
between them, a natural question to ask is do our models of nervous
systems generate similar outputs to those seen experimentally? Is
the whole really the sum of the parts?  Unfortunately, these systems
are mathematically non-tractable and need to be solved by simulation.</p>

<p>Unfortunately, these systems can also be large! The human nervous
system contains XX neurons. We need to find efficient ways to run
our simulations. One approach we will try to exploit is that some
parts neuronal systems seem to be <em>embarrassingly parallel</em>, and
that by carefully structuring our calculations, we can process the
activity inside many neurons in parallel.</p>

<p>At the Computer Architecture group in Cambridge, Dr Simon Moore is
leading research looking at how FPGA&rsquo;s can be used to implement
efficient compute. One hypothesis that is being investigated is that
in many cases compute systems, are not limited by the processing,
but rather the communication, between other processors and with
memory. Using interconnected FPGAs would provide away around this
problem, and also offers other advantages such as the ability to
vectorise calculations and the ability to write custom hardware
processors. The group have built a project called BlueHive, which
consists of XX interconnected ?? Altera Boards.</p>

<p>Over the next months, I will be working with Simon Moore and Robert
Cannon on this project, looking at how particular types of neuronal
network models can be effectively parallelised.</p>
]]></content>
  </entry>
  
</feed>
